from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

class SearchRequest(BaseModel):
    query: str = Field(..., description="Search query text")
    top_k: int = Field(default=5, description="Number of results to return", ge=1, le=50)
    score_threshold: float = Field(default=0.0, description="Minimum similarity score", ge=0.0, le=1.0)
    doc_id: Optional[str] = Field(default=None, description="Limit search to specific document")
    use_gemini_enhancement: bool = Field(default=True, description="Whether to use Gemini AI enhancement")

class SearchResult(BaseModel):
    page: int = Field(..., description="Page number where content was found")
    context: str = Field(..., description="Relevant text content")
    doc_id: str = Field(..., description="Document identifier")
    score: float = Field(..., description="Similarity score")
    char_count: int = Field(..., description="Character count of the context")
    relevance_explanation: Optional[str] = Field(default=None, description="AI explanation of relevance")

class SearchResponse(BaseModel):
    query: str = Field(..., description="Original search query")
    results: List[SearchResult] = Field(..., description="Search results")
    total_found: int = Field(..., description="Total number of results found")
    search_time_ms: float = Field(..., description="Search execution time in milliseconds")
    enhancement_type: Optional[str] = Field(default=None, description="Type of AI enhancement used")
    gemini_enabled: Optional[bool] = Field(default=None, description="Whether Gemini AI was available")
    ai_summary: Optional[str] = Field(default=None, description="AI-generated summary of results")

class ProgressiveSearchResponse(BaseModel):
    query: str = Field(..., description="Original search query")
    results: List[SearchResult] = Field(..., description="Fast search results")
    total_found: int = Field(..., description="Total number of results found")
    search_time_ms: float = Field(..., description="Fast search execution time")
    search_id: str = Field(..., description="Unique identifier for this search")
    enhancement_status: str = Field(..., description="Status of AI enhancement: pending, scheduled, complete, unavailable")

class EnhancedSearchResult(SearchResult):
    ai_explanation: Optional[str] = Field(default=None, description="AI explanation of why this result is relevant")
    confidence_score: Optional[float] = Field(default=None, description="AI confidence in result relevance")

class QuerySuggestion(BaseModel):
    original_query: str = Field(..., description="Original query text")
    suggestions: List[str] = Field(..., description="Improved query suggestions")
    ai_available: bool = Field(..., description="Whether AI suggestions were available")

class ContextSummary(BaseModel):
    summary: str = Field(..., description="AI-generated summary of search results")
    ai_generated: bool = Field(..., description="Whether summary was generated by AI")
    query: str = Field(..., description="Original query")
    confidence: Optional[float] = Field(default=None, description="AI confidence in summary accuracy")

class EmbeddingStats(BaseModel):
    total_embeddings: int = Field(..., description="Total number of embeddings stored")
    embedding_dimension: int = Field(..., description="Dimension of embedding vectors")
    model_name: str = Field(..., description="Name of the embedding model")
    model_loaded: bool = Field(..., description="Whether the model is loaded")
    unique_documents: int = Field(..., description="Number of unique documents")
    storage_size_mb: float = Field(..., description="Storage size in megabytes")
    gemini_enabled: bool = Field(..., description="Whether Gemini AI is available")
    class Config:
        protected_namespaces = ()

class SearchHealthResponse(BaseModel):
    service: str = Field(..., description="Service name")
    status: str = Field(..., description="Service status")
    embedding_service: str = Field(..., description="Embedding service status")
    total_embeddings: Optional[int] = Field(default=None, description="Total embeddings available")
    model_loaded: Optional[bool] = Field(default=None, description="Whether embedding model is loaded")
    gemini_enabled: Optional[bool] = Field(default=None, description="Whether Gemini AI is enabled")
    last_check: datetime = Field(default_factory=datetime.utcnow, description="Last health check time")
    class Config:
        protected_namespaces = ()